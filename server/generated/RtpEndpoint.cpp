/* Autogenerated with Kurento Idl */

#include <memory>

#include "MediaPipeline.hpp"
#include "RtpEndpoint.hpp"
#include <JsonSerializer.hpp>

namespace kurento {

std::shared_ptr<MediaObject> RtpEndpoint::Factory::createObject (const Json::Value &params)
{
  std::shared_ptr<MediaPipeline> mediaPipeline;
  int garbagePeriod = 0;

  if (!params.isMember ("mediaPipeline")) {
    /* param 'mediaPipeline' not present, raise exception */
    JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'mediaPipeline' parameter is requiered");
    throw e;
  } else {
    JsonSerializer s(false);
    s.JsonValue = params;
    s.SerializeNVP(mediaPipeline);
  }

  if (!params.isMember ("garbagePeriod")) {
    /* param 'garbagePeriod' not present, using default */
    garbagePeriod = 120;
  } else {
    JsonSerializer s(false);
    s.JsonValue = params;
    s.SerializeNVP(garbagePeriod);
  }

  return createObject (mediaPipeline, garbagePeriod);
}

RtpEndpoint::Factory::StaticConstructor RtpEndpoint::Factory::staticConstructor;

RtpEndpoint::Factory::StaticConstructor::StaticConstructor()
{
  if (objectRegistrar) {
    std::shared_ptr <Factory> factory (new RtpEndpoint::Factory());

    objectRegistrar->registerFactory(factory);
  }
}

void
RtpEndpoint::Invoker::invoke (std::shared_ptr<MediaObject> obj,
    const std::string &methodName, const Json::Value &params,
    Json::Value &response)
{
  SdpEndpoint::Invoker::invoke(obj, methodName, params, response);
}

std::string
RtpEndpoint::connect(const std::string &eventType, std::shared_ptr<EventHandler> handler)
{
  return SdpEndpoint::connect (eventType, handler);
}

} /* kurento */

void
Serialize(std::shared_ptr<kurento::RtpEndpoint> &object, JsonSerializer &serializer)
{
  if (!serializer.IsWriter) {
    try {
      std::shared_ptr<kurento::MediaObject> aux;
      aux = kurento::RtpEndpoint::Factory::getObject (serializer.JsonValue.asString ());
      object = std::dynamic_pointer_cast<kurento::RtpEndpoint> (aux);
      return;
    } catch (kurento::JsonRpc::CallException &ex) {
      kurento::JsonRpc::CallException e (kurento::JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'RtpEndpoint' object not found: "+ ex.getMessage());
      throw e;
    }
  }
  std::shared_ptr<kurento::SdpEndpoint> aux = std::dynamic_pointer_cast<kurento::SdpEndpoint> (object);

  void Serialize(std::shared_ptr<kurento::SdpEndpoint> &object, JsonSerializer &serializer);
  Serialize(aux, serializer);
}

void
Serialize(kurento::RtpEndpoint &object, JsonSerializer &serializer)
{
  void Serialize(kurento::SdpEndpoint &object, JsonSerializer &serializer);
  try {
    Serialize(dynamic_cast<kurento::SdpEndpoint &> (object), serializer);
  } catch (std::bad_cast) {
  }
}
