/* Autogenerated with Kurento Idl */

#include "PointerDetectorWindowMediaParam.hpp"
#include <JsonSerializer.hpp>

namespace kurento {


PointerDetectorWindowMediaParam::PointerDetectorWindowMediaParam (const Json::Value &value) {
  Json::Value aux;

  if (value.isMember ("id")) {
    aux = value["id"];

    if (!aux.isString ()) {
      /* param 'id' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'id' parameter should be a string");
      throw e;
    }

    id = aux.asString ();
  } else {
    /* Requiered property 'id' not present, raise exception */
    JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'id' property is requiered");
    throw e;
  }

  if (value.isMember ("height")) {
    aux = value["height"];

    if (!aux.isInt ()) {
      /* param 'height' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'height' parameter should be a integer");
      throw e;
    }

    height = aux.asInt ();
  } else {
    /* Requiered property 'height' not present, raise exception */
    JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'height' property is requiered");
    throw e;
  }

  if (value.isMember ("width")) {
    aux = value["width"];

    if (!aux.isInt ()) {
      /* param 'width' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'width' parameter should be a integer");
      throw e;
    }

    width = aux.asInt ();
  } else {
    /* Requiered property 'width' not present, raise exception */
    JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'width' property is requiered");
    throw e;
  }

  if (value.isMember ("upperRightX")) {
    aux = value["upperRightX"];

    if (!aux.isInt ()) {
      /* param 'upperRightX' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'upperRightX' parameter should be a integer");
      throw e;
    }

    upperRightX = aux.asInt ();
  } else {
    /* Requiered property 'upperRightX' not present, raise exception */
    JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'upperRightX' property is requiered");
    throw e;
  }

  if (value.isMember ("upperRightY")) {
    aux = value["upperRightY"];

    if (!aux.isInt ()) {
      /* param 'upperRightY' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'upperRightY' parameter should be a integer");
      throw e;
    }

    upperRightY = aux.asInt ();
  } else {
    /* Requiered property 'upperRightY' not present, raise exception */
    JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'upperRightY' property is requiered");
    throw e;
  }

  if (value.isMember ("activeImage")) {
    aux = value["activeImage"];

    if (!aux.isString ()) {
      /* param 'activeImage' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'activeImage' parameter should be a string");
      throw e;
    }

    activeImage = aux.asString ();
    _isSetActiveImage = true;
  }

  if (value.isMember ("imageTransparency")) {
    aux = value["imageTransparency"];

    if (!aux.isDouble ()) {
      /* param 'imageTransparency' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'imageTransparency' parameter should be a double");
      throw e;
    }

    imageTransparency = aux.asDouble ();
    _isSetImageTransparency = true;
  }

  if (value.isMember ("image")) {
    aux = value["image"];

    if (!aux.isString ()) {
      /* param 'image' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'image' parameter should be a string");
      throw e;
    }

    image = aux.asString ();
    _isSetImage = true;
  }

}

} /* kurento */

void
Serialize(std::shared_ptr<kurento::PointerDetectorWindowMediaParam>& object, JsonSerializer& s)
{
  if (!s.IsWriter && !object) {
    object.reset(new kurento::PointerDetectorWindowMediaParam());
  }

  if (object) {
    s.Serialize("id", object->id);
    s.Serialize("height", object->height);
    s.Serialize("width", object->width);
    s.Serialize("upperRightX", object->upperRightX);
    s.Serialize("upperRightY", object->upperRightY);
    s.Serialize("activeImage", object->activeImage);
    s.Serialize("imageTransparency", object->imageTransparency);
    s.Serialize("image", object->image);
  }

  if (!s.IsWriter) {

    if (s.JsonValue.isMember("activeImage")) {
      object->_isSetActiveImage = true;
    }

    if (s.JsonValue.isMember("imageTransparency")) {
      object->_isSetImageTransparency = true;
    }

    if (s.JsonValue.isMember("image")) {
      object->_isSetImage = true;
    }

  }

}
