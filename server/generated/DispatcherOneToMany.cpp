/* Autogenerated with Kurento Idl */

#include <memory>

#include "MediaPipeline.hpp"
#include "HubPort.hpp"
#include "DispatcherOneToMany.hpp"
#include <JsonSerializer.hpp>

namespace kurento {

std::shared_ptr<MediaObject> DispatcherOneToMany::Factory::createObject (const Json::Value &params)
{
  std::shared_ptr<MediaPipeline> mediaPipeline;
  int garbagePeriod = 0;

  if (!params.isMember ("mediaPipeline")) {
    /* param 'mediaPipeline' not present, raise exception */
    JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'mediaPipeline' parameter is requiered");
    throw e;
  } else {
    JsonSerializer s(false);
    s.JsonValue = params;
    s.SerializeNVP(mediaPipeline);
  }

  if (!params.isMember ("garbagePeriod")) {
    /* param 'garbagePeriod' not present, using default */
    garbagePeriod = 120;
  } else {
    JsonSerializer s(false);
    s.JsonValue = params;
    s.SerializeNVP(garbagePeriod);
  }

  return createObject (mediaPipeline, garbagePeriod);
}

DispatcherOneToMany::Factory::StaticConstructor DispatcherOneToMany::Factory::staticConstructor;

DispatcherOneToMany::Factory::StaticConstructor::StaticConstructor()
{
  if (objectRegistrar) {
    std::shared_ptr <Factory> factory (new DispatcherOneToMany::Factory());

    objectRegistrar->registerFactory(factory);
  }
}

void
DispatcherOneToMany::Invoker::invoke (std::shared_ptr<MediaObject> obj,
    const std::string &methodName, const Json::Value &params,
    Json::Value &response)
{
  if (methodName == "setSource" && params.size() == 1) {
    Json::Value aux;
    std::shared_ptr<HubPort> source;

    if (!params.isMember ("source")) {
      /* param 'source' not present, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'source' parameter is requiered");
      throw e;
    } else {
      std::shared_ptr<MediaObject> obj;

      aux = params["source"];

      if (!aux.isString ()) {
        /* param 'source' has invalid type value, raise exception */
        JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'source' parameter should be a string");
        throw e;
      }

      try {
        obj = HubPort::Factory::getObject (aux.asString ());
      } catch (JsonRpc::CallException &ex) {
        JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'source' object not found: "+ ex.getMessage());
        throw e;
      }

      source = std::dynamic_pointer_cast<HubPort> (obj);

      if (!source) {
        JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'source' object has a invalid type");
        throw e;
      }
    }

    // TODO: Implement method setSource
    std::shared_ptr<DispatcherOneToMany> finalObj;
    finalObj = std::dynamic_pointer_cast<DispatcherOneToMany> (obj);
    if (!finalObj) {
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "Object not found or has incorrect type");
      throw e;
    }

    finalObj->setSource (source);
    return;
  }

  if (methodName == "removeSource" && params.size() == 0) {
    Json::Value aux;

    // TODO: Implement method removeSource
    std::shared_ptr<DispatcherOneToMany> finalObj;
    finalObj = std::dynamic_pointer_cast<DispatcherOneToMany> (obj);
    if (!finalObj) {
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "Object not found or has incorrect type");
      throw e;
    }

    finalObj->removeSource ();
    return;
  }

  Hub::Invoker::invoke(obj, methodName, params, response);
}

std::string
DispatcherOneToMany::connect(const std::string &eventType, std::shared_ptr<EventHandler> handler)
{
  return Hub::connect (eventType, handler);
}

} /* kurento */

void
Serialize(std::shared_ptr<kurento::DispatcherOneToMany> &object, JsonSerializer &serializer)
{
  if (!serializer.IsWriter) {
    try {
      std::shared_ptr<kurento::MediaObject> aux;
      aux = kurento::DispatcherOneToMany::Factory::getObject (serializer.JsonValue.asString ());
      object = std::dynamic_pointer_cast<kurento::DispatcherOneToMany> (aux);
      return;
    } catch (kurento::JsonRpc::CallException &ex) {
      kurento::JsonRpc::CallException e (kurento::JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'DispatcherOneToMany' object not found: "+ ex.getMessage());
      throw e;
    }
  }
  std::shared_ptr<kurento::Hub> aux = std::dynamic_pointer_cast<kurento::Hub> (object);

  void Serialize(std::shared_ptr<kurento::Hub> &object, JsonSerializer &serializer);
  Serialize(aux, serializer);
}

void
Serialize(kurento::DispatcherOneToMany &object, JsonSerializer &serializer)
{
  void Serialize(kurento::Hub &object, JsonSerializer &serializer);
  try {
    Serialize(dynamic_cast<kurento::Hub &> (object), serializer);
  } catch (std::bad_cast) {
  }
}
