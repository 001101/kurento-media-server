/* Autogenerated with Kurento Idl */

#include <memory>

#include "MediaPipeline.hpp"
#include "WindowParam.hpp"
#include "ChromaFilter.hpp"
#include <JsonSerializer.hpp>

namespace kurento {

std::shared_ptr<MediaObject> ChromaFilter::Factory::createObject (const Json::Value &params)
{
  std::shared_ptr<MediaPipeline> mediaPipeline;
  std::shared_ptr<WindowParam> window;
  std::string backgroundImage;
  int garbagePeriod = 0;

  if (!params.isMember ("mediaPipeline")) {
    /* param 'mediaPipeline' not present, raise exception */
    JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'mediaPipeline' parameter is requiered");
    throw e;
  } else {
    JsonSerializer s(false);
    s.JsonValue = params;
    s.SerializeNVP(mediaPipeline);
  }

  if (!params.isMember ("window")) {
    /* param 'window' not present, raise exception */
    JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'window' parameter is requiered");
    throw e;
  } else {
    JsonSerializer s(false);
    s.JsonValue = params;
    s.SerializeNVP(window);
  }

  if (!params.isMember ("backgroundImage")) {
    // Warning, optional constructor parameter 'backgroundImage' but no default value provided
  } else {
    JsonSerializer s(false);
    s.JsonValue = params;
    s.SerializeNVP(backgroundImage);
  }

  if (!params.isMember ("garbagePeriod")) {
    /* param 'garbagePeriod' not present, using default */
    garbagePeriod = 120;
  } else {
    JsonSerializer s(false);
    s.JsonValue = params;
    s.SerializeNVP(garbagePeriod);
  }

  return createObject (mediaPipeline, window, backgroundImage, garbagePeriod);
}

ChromaFilter::Factory::StaticConstructor ChromaFilter::Factory::staticConstructor;

ChromaFilter::Factory::StaticConstructor::StaticConstructor()
{
  if (objectRegistrar) {
    std::shared_ptr <Factory> factory (new ChromaFilter::Factory());

    objectRegistrar->registerFactory(factory);
  }
}

void
ChromaFilter::Invoker::invoke (std::shared_ptr<MediaObject> obj,
    const std::string &methodName, const Json::Value &params,
    Json::Value &response)
{
  if (methodName == "setBackground" && params.size() == 1) {
    Json::Value aux;
    std::string uri;

    if (!params.isMember ("uri")) {
      /* param 'uri' not present, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'uri' parameter is requiered");
      throw e;
    } else {
      aux = params["uri"];

      if (!aux.isString ()) {
        /* param 'uri' has invalid type value, raise exception */
        JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'uri' parameter should be a string");
        throw e;
      }

      uri = aux.asString ();
    }

    // TODO: Implement method setBackground
    std::shared_ptr<ChromaFilter> finalObj;
    finalObj = std::dynamic_pointer_cast<ChromaFilter> (obj);
    if (!finalObj) {
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "Object not found or has incorrect type");
      throw e;
    }

    finalObj->setBackground (uri);
    return;
  }

  if (methodName == "unsetBackground" && params.size() == 0) {
    Json::Value aux;

    // TODO: Implement method unsetBackground
    std::shared_ptr<ChromaFilter> finalObj;
    finalObj = std::dynamic_pointer_cast<ChromaFilter> (obj);
    if (!finalObj) {
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "Object not found or has incorrect type");
      throw e;
    }

    finalObj->unsetBackground ();
    return;
  }

  Filter::Invoker::invoke(obj, methodName, params, response);
}

std::string
ChromaFilter::connect(const std::string &eventType, std::shared_ptr<EventHandler> handler)
{
  return Filter::connect (eventType, handler);
}

} /* kurento */

void
Serialize(std::shared_ptr<kurento::ChromaFilter> &object, JsonSerializer &serializer)
{
  if (!serializer.IsWriter) {
    try {
      std::shared_ptr<kurento::MediaObject> aux;
      aux = kurento::ChromaFilter::Factory::getObject (serializer.JsonValue.asString ());
      object = std::dynamic_pointer_cast<kurento::ChromaFilter> (aux);
      return;
    } catch (kurento::JsonRpc::CallException &ex) {
      kurento::JsonRpc::CallException e (kurento::JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'ChromaFilter' object not found: "+ ex.getMessage());
      throw e;
    }
  }
  std::shared_ptr<kurento::Filter> aux = std::dynamic_pointer_cast<kurento::Filter> (object);

  void Serialize(std::shared_ptr<kurento::Filter> &object, JsonSerializer &serializer);
  Serialize(aux, serializer);
}

void
Serialize(kurento::ChromaFilter &object, JsonSerializer &serializer)
{
  void Serialize(kurento::Filter &object, JsonSerializer &serializer);
  try {
    Serialize(dynamic_cast<kurento::Filter &> (object), serializer);
  } catch (std::bad_cast) {
  }
}
