/* Autogenerated with Kurento Idl */

#ifndef __REGION_OF_INTEREST_CONFIG_HPP__
#define __REGION_OF_INTEREST_CONFIG_HPP__

#include <jsoncpp/json/json.h>
#include <JsonRpcException.hpp>
#include <memory>

class JsonSerializer;

namespace kurento {
class RegionOfInterestConfig;
} /*kurento */

void Serialize(std::shared_ptr<kurento::RegionOfInterestConfig>& object, JsonSerializer& s);

namespace kurento {

class RegionOfInterestConfig
{

public:

  RegionOfInterestConfig (){
  };

  RegionOfInterestConfig (const Json::Value &value);

  void setOccupancyLevelMin (int occupancyLevelMin) {
    this->occupancyLevelMin = occupancyLevelMin;
    _isSetOccupancyLevelMin = true;
  };

  int getOccupancyLevelMin () {
    return occupancyLevelMin;
  };

  bool isSetOccupancyLevelMin () {
    return _isSetOccupancyLevelMin;
  };

  void setOccupancyLevelMed (int occupancyLevelMed) {
    this->occupancyLevelMed = occupancyLevelMed;
    _isSetOccupancyLevelMed = true;
  };

  int getOccupancyLevelMed () {
    return occupancyLevelMed;
  };

  bool isSetOccupancyLevelMed () {
    return _isSetOccupancyLevelMed;
  };

  void setOccupancyLevelMax (int occupancyLevelMax) {
    this->occupancyLevelMax = occupancyLevelMax;
    _isSetOccupancyLevelMax = true;
  };

  int getOccupancyLevelMax () {
    return occupancyLevelMax;
  };

  bool isSetOccupancyLevelMax () {
    return _isSetOccupancyLevelMax;
  };

  void setOccupancyNumFramesToEvent (int occupancyNumFramesToEvent) {
    this->occupancyNumFramesToEvent = occupancyNumFramesToEvent;
    _isSetOccupancyNumFramesToEvent = true;
  };

  int getOccupancyNumFramesToEvent () {
    return occupancyNumFramesToEvent;
  };

  bool isSetOccupancyNumFramesToEvent () {
    return _isSetOccupancyNumFramesToEvent;
  };

  void setFluidityLevelMin (int fluidityLevelMin) {
    this->fluidityLevelMin = fluidityLevelMin;
    _isSetFluidityLevelMin = true;
  };

  int getFluidityLevelMin () {
    return fluidityLevelMin;
  };

  bool isSetFluidityLevelMin () {
    return _isSetFluidityLevelMin;
  };

  void setFluidityLevelMed (int fluidityLevelMed) {
    this->fluidityLevelMed = fluidityLevelMed;
    _isSetFluidityLevelMed = true;
  };

  int getFluidityLevelMed () {
    return fluidityLevelMed;
  };

  bool isSetFluidityLevelMed () {
    return _isSetFluidityLevelMed;
  };

  void setFluidityLevelMax (int fluidityLevelMax) {
    this->fluidityLevelMax = fluidityLevelMax;
    _isSetFluidityLevelMax = true;
  };

  int getFluidityLevelMax () {
    return fluidityLevelMax;
  };

  bool isSetFluidityLevelMax () {
    return _isSetFluidityLevelMax;
  };

  void setFluidityNumFramesToEvent (int fluidityNumFramesToEvent) {
    this->fluidityNumFramesToEvent = fluidityNumFramesToEvent;
    _isSetFluidityNumFramesToEvent = true;
  };

  int getFluidityNumFramesToEvent () {
    return fluidityNumFramesToEvent;
  };

  bool isSetFluidityNumFramesToEvent () {
    return _isSetFluidityNumFramesToEvent;
  };

  void setSendOpticalFlowEvent (bool sendOpticalFlowEvent) {
    this->sendOpticalFlowEvent = sendOpticalFlowEvent;
    _isSetSendOpticalFlowEvent = true;
  };

  bool getSendOpticalFlowEvent () {
    return sendOpticalFlowEvent;
  };

  bool isSetSendOpticalFlowEvent () {
    return _isSetSendOpticalFlowEvent;
  };

  void setOpticalFlowNumFramesToEvent (int opticalFlowNumFramesToEvent) {
    this->opticalFlowNumFramesToEvent = opticalFlowNumFramesToEvent;
    _isSetOpticalFlowNumFramesToEvent = true;
  };

  int getOpticalFlowNumFramesToEvent () {
    return opticalFlowNumFramesToEvent;
  };

  bool isSetOpticalFlowNumFramesToEvent () {
    return _isSetOpticalFlowNumFramesToEvent;
  };

  void setOpticalFlowNumFramesToReset (int opticalFlowNumFramesToReset) {
    this->opticalFlowNumFramesToReset = opticalFlowNumFramesToReset;
    _isSetOpticalFlowNumFramesToReset = true;
  };

  int getOpticalFlowNumFramesToReset () {
    return opticalFlowNumFramesToReset;
  };

  bool isSetOpticalFlowNumFramesToReset () {
    return _isSetOpticalFlowNumFramesToReset;
  };

  void setOpticalFlowAngleOffset (int opticalFlowAngleOffset) {
    this->opticalFlowAngleOffset = opticalFlowAngleOffset;
    _isSetOpticalFlowAngleOffset = true;
  };

  int getOpticalFlowAngleOffset () {
    return opticalFlowAngleOffset;
  };

  bool isSetOpticalFlowAngleOffset () {
    return _isSetOpticalFlowAngleOffset;
  };

private:
  int occupancyLevelMin;
  bool _isSetOccupancyLevelMin = false;
  int occupancyLevelMed;
  bool _isSetOccupancyLevelMed = false;
  int occupancyLevelMax;
  bool _isSetOccupancyLevelMax = false;
  int occupancyNumFramesToEvent;
  bool _isSetOccupancyNumFramesToEvent = false;
  int fluidityLevelMin;
  bool _isSetFluidityLevelMin = false;
  int fluidityLevelMed;
  bool _isSetFluidityLevelMed = false;
  int fluidityLevelMax;
  bool _isSetFluidityLevelMax = false;
  int fluidityNumFramesToEvent;
  bool _isSetFluidityNumFramesToEvent = false;
  bool sendOpticalFlowEvent;
  bool _isSetSendOpticalFlowEvent = false;
  int opticalFlowNumFramesToEvent;
  bool _isSetOpticalFlowNumFramesToEvent = false;
  int opticalFlowNumFramesToReset;
  bool _isSetOpticalFlowNumFramesToReset = false;
  int opticalFlowAngleOffset;
  bool _isSetOpticalFlowAngleOffset = false;


  friend void ::Serialize(std::shared_ptr<RegionOfInterestConfig>& object, JsonSerializer& s);
};

} /* kurento */

#endif /*  __REGION_OF_INTEREST_CONFIG_HPP__ */
