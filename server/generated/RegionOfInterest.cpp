/* Autogenerated with Kurento Idl */

#include "Point.hpp"
#include "RegionOfInterest.hpp"
#include <JsonSerializer.hpp>

namespace kurento {

RegionOfInterest::RegionOfInterest (const Json::Value &value) {
  Json::Value aux;

  if (value.isMember ("points")) {
    aux = value["points"];

    if (!aux.isArray ()) {
      /* param 'points' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'points' parameter should be a array");
      throw e;
    } else {
      JsonSerializer s(false);
      s.JsonValue = value;
      s.SerializeNVP(points);
    }
  } else {
    /* Requiered property 'points' not present, raise exception */
    JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'points' property is requiered");
    throw e;
  }

  if (value.isMember ("id")) {
    aux = value["id"];

    if (!aux.isString ()) {
      /* param 'id' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'id' parameter should be a string");
      throw e;
    } else {
      JsonSerializer s(false);
      s.JsonValue = value;
      s.SerializeNVP(id);
    }
  } else {
    /* Requiered property 'id' not present, raise exception */
    JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'id' property is requiered");
    throw e;
  }

}

} /* kurento */

void
Serialize(std::shared_ptr<kurento::RegionOfInterest>& object, JsonSerializer& s)
{
  if (!s.IsWriter && !object) {
    object.reset(new kurento::RegionOfInterest());
  }

  if (object) {
    s.Serialize("points", object->points);
    s.Serialize("id", object->id);
  }

  if (!s.IsWriter) {

  }

}
