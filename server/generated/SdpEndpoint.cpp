/* Autogenerated with Kurento Idl */

#include <memory>

#include "SdpEndpoint.hpp"
#include <JsonSerializer.hpp>

namespace kurento {

void
SdpEndpoint::Invoker::invoke (std::shared_ptr<MediaObject> obj,
    const std::string &methodName, const Json::Value &params,
    Json::Value &response)
{
  if (methodName == "generateOffer" && params.size() == 0) {
    Json::Value aux;
    std::string ret;
    JsonSerializer serializer(true);

    // TODO: Implement method generateOffer
    std::shared_ptr<SdpEndpoint> finalObj;
    finalObj = std::dynamic_pointer_cast<SdpEndpoint> (obj);
    if (!finalObj) {
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "Object not found or has incorrect type");
      throw e;
    }

    ret =finalObj->generateOffer ();
    serializer.SerializeNVP (ret);
    response = serializer.JsonValue["ret"];
    return;
  }

  if (methodName == "processOffer" && params.size() == 1) {
    Json::Value aux;
    std::string ret;
    JsonSerializer serializer(true);
    std::string offer;

    if (!params.isMember ("offer")) {
      /* param 'offer' not present, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'offer' parameter is requiered");
      throw e;
    } else {
      aux = params["offer"];

      if (!aux.isString ()) {
        /* param 'offer' has invalid type value, raise exception */
        JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'offer' parameter should be a string");
        throw e;
      }

      offer = aux.asString ();
    }

    // TODO: Implement method processOffer
    std::shared_ptr<SdpEndpoint> finalObj;
    finalObj = std::dynamic_pointer_cast<SdpEndpoint> (obj);
    if (!finalObj) {
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "Object not found or has incorrect type");
      throw e;
    }

    ret =finalObj->processOffer (offer);
    serializer.SerializeNVP (ret);
    response = serializer.JsonValue["ret"];
    return;
  }

  if (methodName == "processAnswer" && params.size() == 1) {
    Json::Value aux;
    std::string ret;
    JsonSerializer serializer(true);
    std::string answer;

    if (!params.isMember ("answer")) {
      /* param 'answer' not present, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'answer' parameter is requiered");
      throw e;
    } else {
      aux = params["answer"];

      if (!aux.isString ()) {
        /* param 'answer' has invalid type value, raise exception */
        JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'answer' parameter should be a string");
        throw e;
      }

      answer = aux.asString ();
    }

    // TODO: Implement method processAnswer
    std::shared_ptr<SdpEndpoint> finalObj;
    finalObj = std::dynamic_pointer_cast<SdpEndpoint> (obj);
    if (!finalObj) {
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "Object not found or has incorrect type");
      throw e;
    }

    ret =finalObj->processAnswer (answer);
    serializer.SerializeNVP (ret);
    response = serializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getLocalSessionDescriptor" && params.size() == 0) {
    Json::Value aux;
    std::string ret;
    JsonSerializer serializer(true);

    // TODO: Implement method getLocalSessionDescriptor
    std::shared_ptr<SdpEndpoint> finalObj;
    finalObj = std::dynamic_pointer_cast<SdpEndpoint> (obj);
    if (!finalObj) {
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "Object not found or has incorrect type");
      throw e;
    }

    ret =finalObj->getLocalSessionDescriptor ();
    serializer.SerializeNVP (ret);
    response = serializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getRemoteSessionDescriptor" && params.size() == 0) {
    Json::Value aux;
    std::string ret;
    JsonSerializer serializer(true);

    // TODO: Implement method getRemoteSessionDescriptor
    std::shared_ptr<SdpEndpoint> finalObj;
    finalObj = std::dynamic_pointer_cast<SdpEndpoint> (obj);
    if (!finalObj) {
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "Object not found or has incorrect type");
      throw e;
    }

    ret =finalObj->getRemoteSessionDescriptor ();
    serializer.SerializeNVP (ret);
    response = serializer.JsonValue["ret"];
    return;
  }

  SessionEndpoint::Invoker::invoke(obj, methodName, params, response);
}

std::string
SdpEndpoint::connect(const std::string &eventType, std::shared_ptr<EventHandler> handler)
{
  return SessionEndpoint::connect (eventType, handler);
}

} /* kurento */

void
Serialize(std::shared_ptr<kurento::SdpEndpoint> &object, JsonSerializer &serializer)
{
  if (!serializer.IsWriter) {
    try {
      std::shared_ptr<kurento::MediaObject> aux;
      aux = kurento::SdpEndpoint::Factory::getObject (serializer.JsonValue.asString ());
      object = std::dynamic_pointer_cast<kurento::SdpEndpoint> (aux);
      return;
    } catch (kurento::JsonRpc::CallException &ex) {
      kurento::JsonRpc::CallException e (kurento::JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'SdpEndpoint' object not found: "+ ex.getMessage());
      throw e;
    }
  }
  std::shared_ptr<kurento::SessionEndpoint> aux = std::dynamic_pointer_cast<kurento::SessionEndpoint> (object);

  void Serialize(std::shared_ptr<kurento::SessionEndpoint> &object, JsonSerializer &serializer);
  Serialize(aux, serializer);
}

void
Serialize(kurento::SdpEndpoint &object, JsonSerializer &serializer)
{
  void Serialize(kurento::SessionEndpoint &object, JsonSerializer &serializer);
  try {
    Serialize(dynamic_cast<kurento::SessionEndpoint &> (object), serializer);
  } catch (std::bad_cast) {
  }
}
