/* Autogenerated with Kurento Idl */

#include <memory>

#include "MediaPipeline.hpp"
#include "RegionOfInterest.hpp"
#include "CrowdDetectorFilter.hpp"
#include <JsonSerializer.hpp>

namespace kurento {

MediaObject * CrowdDetectorFilter::Factory::createObjectPointer (const Json::Value &params)
{
  std::shared_ptr<MediaPipeline> mediaPipeline;
  std::vector<std::shared_ptr<RegionOfInterest>> rois;

  if (!params.isMember ("mediaPipeline")) {
    /* param 'mediaPipeline' not present, raise exception */
    JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'mediaPipeline' parameter is requiered");
    throw e;
  } else {
    JsonSerializer s(false);
    s.JsonValue = params;
    s.SerializeNVP(mediaPipeline);
  }

  if (!params.isMember ("rois")) {
    /* param 'rois' not present, raise exception */
    JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'rois' parameter is requiered");
    throw e;
  } else {
    JsonSerializer s(false);
    s.JsonValue = params;
    s.SerializeNVP(rois);
  }

  return createObject (mediaPipeline, rois);
}

CrowdDetectorFilter::Factory::StaticConstructor CrowdDetectorFilter::Factory::staticConstructor;

CrowdDetectorFilter::Factory::StaticConstructor::StaticConstructor()
{
  if (objectRegistrar) {
    std::shared_ptr <Factory> factory (new CrowdDetectorFilter::Factory());

    objectRegistrar->registerFactory(factory);
  }
}

void
CrowdDetectorFilter::Invoker::invoke (std::shared_ptr<MediaObject> obj,
    const std::string &methodName, const Json::Value &params,
    Json::Value &response)
{
  Filter::Invoker::invoke(obj, methodName, params, response);
}

std::string
CrowdDetectorFilter::connect(const std::string &eventType, std::shared_ptr<EventHandler> handler)
{
  if ("CrowdDetectorFluidity" == eventType) {
    sigc::connection conn = signalCrowdDetectorFluidity.connect ([&, handler] (CrowdDetectorFluidity event) {
      JsonSerializer s (true);

      s.Serialize ("data", event);
      s.Serialize ("object", this);
      s.JsonValue["type"] = "CrowdDetectorFluidity";
      s.JsonValue["subscription"] = handler->getId();
      handler->sendEvent(s.JsonValue);
    });
    handler->setConnection (conn);
    return handler->getId();
  }
  if ("CrowdDetectorOccupancy" == eventType) {
    sigc::connection conn = signalCrowdDetectorOccupancy.connect ([&, handler] (CrowdDetectorOccupancy event) {
      JsonSerializer s (true);

      s.Serialize ("data", event);
      s.Serialize ("object", this);
      s.JsonValue["type"] = "CrowdDetectorOccupancy";
      s.JsonValue["subscription"] = handler->getId();
      handler->sendEvent(s.JsonValue);
    });
    handler->setConnection (conn);
    return handler->getId();
  }
  if ("CrowdDetectorDirection" == eventType) {
    sigc::connection conn = signalCrowdDetectorDirection.connect ([&, handler] (CrowdDetectorDirection event) {
      JsonSerializer s (true);

      s.Serialize ("data", event);
      s.Serialize ("object", this);
      s.JsonValue["type"] = "CrowdDetectorDirection";
      s.JsonValue["subscription"] = handler->getId();
      handler->sendEvent(s.JsonValue);
    });
    handler->setConnection (conn);
    return handler->getId();
  }
  return Filter::connect (eventType, handler);
}

} /* kurento */

void
Serialize(std::shared_ptr<kurento::CrowdDetectorFilter> &object, JsonSerializer &serializer)
{
  if (!serializer.IsWriter) {
    try {
      std::shared_ptr<kurento::MediaObject> aux;
      aux = kurento::CrowdDetectorFilter::Factory::getObject (serializer.JsonValue.asString ());
      object = std::dynamic_pointer_cast<kurento::CrowdDetectorFilter> (aux);
      return;
    } catch (kurento::JsonRpc::CallException &ex) {
      kurento::JsonRpc::CallException e (kurento::JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'CrowdDetectorFilter' object not found: "+ ex.getMessage());
      throw e;
    }
  }
  std::shared_ptr<kurento::Filter> aux = std::dynamic_pointer_cast<kurento::Filter> (object);

  void Serialize(std::shared_ptr<kurento::Filter> &object, JsonSerializer &serializer);
  Serialize(aux, serializer);
}

void
Serialize(kurento::CrowdDetectorFilter &object, JsonSerializer &serializer)
{
  void Serialize(kurento::Filter &object, JsonSerializer &serializer);
  try {
    Serialize(dynamic_cast<kurento::Filter &> (object), serializer);
  } catch (std::bad_cast) {
  }
}
