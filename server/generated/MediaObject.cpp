/* Autogenerated with Kurento Idl */

#include <memory>

#include "MediaPipeline.hpp"
#include "MediaObject.hpp"
#include <JsonSerializer.hpp>

namespace kurento {


void
MediaObject::Invoker::invoke (std::shared_ptr<MediaObject> obj,
    const std::string &methodName, const Json::Value &params,
    Json::Value &response)
{
  if (methodName == "getMediaPipeline" && params.size() == 0) {
    Json::Value aux;
    std::shared_ptr<MediaPipeline> ret;
    JsonSerializer serializer(true);

    // TODO: Implement method getMediaPipeline
    std::shared_ptr<MediaObject> finalObj;
    finalObj = std::dynamic_pointer_cast<MediaObject> (obj);
    if (!finalObj) {
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "Object not found or has incorrect type");
      throw e;
    }

    ret =finalObj->getMediaPipeline ();
    serializer.SerializeNVP (ret);
    response = serializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getParent" && params.size() == 0) {
    Json::Value aux;
    std::shared_ptr<MediaObject> ret;
    JsonSerializer serializer(true);

    // TODO: Implement method getParent
    std::shared_ptr<MediaObject> finalObj;
    finalObj = std::dynamic_pointer_cast<MediaObject> (obj);
    if (!finalObj) {
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "Object not found or has incorrect type");
      throw e;
    }

    ret =finalObj->getParent ();
    serializer.SerializeNVP (ret);
    response = serializer.JsonValue["ret"];
    return;
  }

  JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                            "Method '" + methodName + "' with " + std::to_string(params.size()) +" parameters not found");
  throw e;
}

std::string
MediaObject::connect(const std::string &eventType, std::shared_ptr<EventHandler> handler)
{
  if ("Error" == eventType) {
    sigc::connection conn = signalError.connect ([&, handler] (Error event) {
      JsonSerializer s (true);

      s.Serialize ("data", event);
      s.Serialize ("object", this);
      s.JsonValue["type"] = "Error";
      s.JsonValue["subscription"] = handler->getId();
      handler->sendEvent(s.JsonValue);
    });
    handler->setConnection (conn);
    return handler->getId();
  }
  return "";
}

} /* kurento */

