/* Autogenerated with Kurento Idl */

#include <memory>

#include "HttpEndpoint.hpp"
#include <JsonSerializer.hpp>

namespace kurento {


void
HttpEndpoint::Invoker::invoke (std::shared_ptr<MediaObject> obj,
    const std::string &methodName, const Json::Value &params,
    Json::Value &response)
{
  if (methodName == "getUrl" && params.size() == 0) {
    Json::Value aux;
    std::string ret;
    JsonSerializer serializer(true);

    // TODO: Implement method getUrl
    std::shared_ptr<HttpEndpoint> finalObj;
    finalObj = std::dynamic_pointer_cast<HttpEndpoint> (obj);
    if (!finalObj) {
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "Object not found or has incorrect type");
      throw e;
    }

    ret =finalObj->getUrl ();
    serializer.SerializeNVP (ret);
    response = serializer.JsonValue["ret"];
    return;
  }

  SessionEndpoint::Invoker::invoke(obj, methodName, params, response);
}

std::string
HttpEndpoint::connect(const std::string &eventType, std::shared_ptr<EventHandler> handler)
{
  return SessionEndpoint::connect (eventType, handler);
}

} /* kurento */

void
Serialize(std::shared_ptr<kurento::HttpEndpoint> &object, JsonSerializer &serializer)
{
  if (!serializer.IsWriter) {
    try {
      std::shared_ptr<kurento::MediaObject> aux;
      aux = kurento::HttpEndpoint::Factory::getObject (serializer.JsonValue.asString ());
      object = std::dynamic_pointer_cast<kurento::HttpEndpoint> (aux);
      return;
    } catch (kurento::JsonRpc::CallException &ex) {
      kurento::JsonRpc::CallException e (kurento::JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'HttpEndpoint' object not found: "+ ex.getMessage());
      throw e;
    }
  }
  std::shared_ptr<kurento::SessionEndpoint> aux = std::dynamic_pointer_cast<kurento::SessionEndpoint> (object);

  void Serialize(std::shared_ptr<kurento::SessionEndpoint> &object, JsonSerializer &serializer);
  Serialize(aux, serializer);
}

void
Serialize(kurento::HttpEndpoint &object, JsonSerializer &serializer)
{
  void Serialize(kurento::SessionEndpoint &object, JsonSerializer &serializer);
  try {
    Serialize(dynamic_cast<kurento::SessionEndpoint &> (object), serializer);
  } catch (std::bad_cast) {
  }
}
