/* Autogenerated with Kurento Idl */

#ifndef __CROWD_DETECTOR_FLUIDITY_HPP__
#define __CROWD_DETECTOR_FLUIDITY_HPP__

#include <jsoncpp/json/json.h>
#include <JsonRpcException.hpp>
#include <memory>

#include "Media.hpp"

class JsonSerializer;

namespace kurento {
class CrowdDetectorFluidity;
} /* kurento */

void Serialize(kurento::CrowdDetectorFluidity& event, JsonSerializer& s);

namespace kurento {

class CrowdDetectorFluidity : public virtual Media
{

public:

  CrowdDetectorFluidity (float fluidityPercentage, int fluidityLevel, const std::string& roiID, std::shared_ptr<MediaObject> source, const std::string& type) : Media (source, type) {
    this->fluidityPercentage = fluidityPercentage;
    this->fluidityLevel = fluidityLevel;
    this->roiID = roiID;
  };

  CrowdDetectorFluidity (const Json::Value &value);

  virtual void setFluidityPercentage (float fluidityPercentage) {
    this->fluidityPercentage = fluidityPercentage;
  };

  virtual float getFluidityPercentage () {
    return fluidityPercentage;
  };

  virtual void setFluidityLevel (int fluidityLevel) {
    this->fluidityLevel = fluidityLevel;
  };

  virtual int getFluidityLevel () {
    return fluidityLevel;
  };

  virtual void setRoiID (std::string roiID) {
    this->roiID = roiID;
  };

  virtual const std::string& getRoiID () {
    return roiID;
  };

  static std::string getName() {
    return "CrowdDetectorFluidity";
  }

protected:

  CrowdDetectorFluidity() {};

private:
  float fluidityPercentage;
  int fluidityLevel;
  std::string roiID;

  friend void ::Serialize(CrowdDetectorFluidity& event, JsonSerializer& s);
};

} /* kurento */

#endif /*  __CROWD_DETECTOR_FLUIDITY_HPP__ */
