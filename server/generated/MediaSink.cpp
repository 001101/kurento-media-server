/* Autogenerated with Kurento Idl */

#include <memory>

#include "MediaSource.hpp"
#include "MediaSink.hpp"
#include <JsonSerializer.hpp>

namespace kurento {

void
MediaSink::Invoker::invoke (std::shared_ptr<MediaObject> obj,
    const std::string &methodName, const Json::Value &params,
    Json::Value &response)
{
  if (methodName == "disconnect" && params.size() == 1) {
    Json::Value aux;
    std::shared_ptr<MediaSource> src;

    if (!params.isMember ("src")) {
      /* param 'src' not present, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'src' parameter is requiered");
      throw e;
    } else {
      std::shared_ptr<MediaObject> obj;

      aux = params["src"];

      if (!aux.isString ()) {
        /* param 'src' has invalid type value, raise exception */
        JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'src' parameter should be a string");
        throw e;
      }

      try {
        obj = MediaSource::Factory::getObject (aux.asString ());
      } catch (JsonRpc::CallException &ex) {
        JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'src' object not found: "+ ex.getMessage());
        throw e;
      }

      src = std::dynamic_pointer_cast<MediaSource> (obj);

      if (!src) {
        JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'src' object has a invalid type");
        throw e;
      }
    }

    // TODO: Implement method disconnect
    std::shared_ptr<MediaSink> finalObj;
    finalObj = std::dynamic_pointer_cast<MediaSink> (obj);
    if (!finalObj) {
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "Object not found or has incorrect type");
      throw e;
    }

    finalObj->disconnect (src);
    return;
  }

  if (methodName == "getConnectedSrc" && params.size() == 0) {
    Json::Value aux;
    std::shared_ptr<MediaSource> ret;
    JsonSerializer serializer(true);

    // TODO: Implement method getConnectedSrc
    std::shared_ptr<MediaSink> finalObj;
    finalObj = std::dynamic_pointer_cast<MediaSink> (obj);
    if (!finalObj) {
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "Object not found or has incorrect type");
      throw e;
    }

    ret =finalObj->getConnectedSrc ();
    serializer.SerializeNVP (ret);
    response = serializer.JsonValue["ret"];
    return;
  }

  MediaPad::Invoker::invoke(obj, methodName, params, response);
}

std::string
MediaSink::connect(const std::string &eventType, std::shared_ptr<EventHandler> handler)
{
  return MediaPad::connect (eventType, handler);
}

} /* kurento */

void
Serialize(std::shared_ptr<kurento::MediaSink> &object, JsonSerializer &serializer)
{
  if (!serializer.IsWriter) {
    try {
      std::shared_ptr<kurento::MediaObject> aux;
      aux = kurento::MediaSink::Factory::getObject (serializer.JsonValue.asString ());
      object = std::dynamic_pointer_cast<kurento::MediaSink> (aux);
      return;
    } catch (kurento::JsonRpc::CallException &ex) {
      kurento::JsonRpc::CallException e (kurento::JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                              "'MediaSink' object not found: "+ ex.getMessage());
      throw e;
    }
  }
  std::shared_ptr<kurento::MediaPad> aux = std::dynamic_pointer_cast<kurento::MediaPad> (object);

  void Serialize(std::shared_ptr<kurento::MediaPad> &object, JsonSerializer &serializer);
  Serialize(aux, serializer);
}

void
Serialize(kurento::MediaSink &object, JsonSerializer &serializer)
{
  void Serialize(kurento::MediaPad &object, JsonSerializer &serializer);
  try {
    Serialize(dynamic_cast<kurento::MediaPad &> (object), serializer);
  } catch (std::bad_cast) {
  }
}
