/* Autogenerated with Kurento Idl */

#include "RegionOfInterestConfig.hpp"
#include <JsonSerializer.hpp>

namespace kurento {

RegionOfInterestConfig::RegionOfInterestConfig (const Json::Value &value) {
  Json::Value aux;

  if (value.isMember ("occupancyLevelMin")) {
    aux = value["occupancyLevelMin"];

    if (!aux.isInt ()) {
      /* param 'occupancyLevelMin' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'occupancyLevelMin' parameter should be a integer");
      throw e;
    } else {
      JsonSerializer s(false);
      s.JsonValue = value;
      s.SerializeNVP(occupancyLevelMin);
      _isSetOccupancyLevelMin = true;
    }
  }

  if (value.isMember ("occupancyLevelMed")) {
    aux = value["occupancyLevelMed"];

    if (!aux.isInt ()) {
      /* param 'occupancyLevelMed' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'occupancyLevelMed' parameter should be a integer");
      throw e;
    } else {
      JsonSerializer s(false);
      s.JsonValue = value;
      s.SerializeNVP(occupancyLevelMed);
      _isSetOccupancyLevelMed = true;
    }
  }

  if (value.isMember ("occupancyLevelMax")) {
    aux = value["occupancyLevelMax"];

    if (!aux.isInt ()) {
      /* param 'occupancyLevelMax' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'occupancyLevelMax' parameter should be a integer");
      throw e;
    } else {
      JsonSerializer s(false);
      s.JsonValue = value;
      s.SerializeNVP(occupancyLevelMax);
      _isSetOccupancyLevelMax = true;
    }
  }

  if (value.isMember ("occupancyNumFramesToEvent")) {
    aux = value["occupancyNumFramesToEvent"];

    if (!aux.isInt ()) {
      /* param 'occupancyNumFramesToEvent' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'occupancyNumFramesToEvent' parameter should be a integer");
      throw e;
    } else {
      JsonSerializer s(false);
      s.JsonValue = value;
      s.SerializeNVP(occupancyNumFramesToEvent);
      _isSetOccupancyNumFramesToEvent = true;
    }
  }

  if (value.isMember ("fluidityLevelMin")) {
    aux = value["fluidityLevelMin"];

    if (!aux.isInt ()) {
      /* param 'fluidityLevelMin' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'fluidityLevelMin' parameter should be a integer");
      throw e;
    } else {
      JsonSerializer s(false);
      s.JsonValue = value;
      s.SerializeNVP(fluidityLevelMin);
      _isSetFluidityLevelMin = true;
    }
  }

  if (value.isMember ("fluidityLevelMed")) {
    aux = value["fluidityLevelMed"];

    if (!aux.isInt ()) {
      /* param 'fluidityLevelMed' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'fluidityLevelMed' parameter should be a integer");
      throw e;
    } else {
      JsonSerializer s(false);
      s.JsonValue = value;
      s.SerializeNVP(fluidityLevelMed);
      _isSetFluidityLevelMed = true;
    }
  }

  if (value.isMember ("fluidityLevelMax")) {
    aux = value["fluidityLevelMax"];

    if (!aux.isInt ()) {
      /* param 'fluidityLevelMax' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'fluidityLevelMax' parameter should be a integer");
      throw e;
    } else {
      JsonSerializer s(false);
      s.JsonValue = value;
      s.SerializeNVP(fluidityLevelMax);
      _isSetFluidityLevelMax = true;
    }
  }

  if (value.isMember ("fluidityNumFramesToEvent")) {
    aux = value["fluidityNumFramesToEvent"];

    if (!aux.isInt ()) {
      /* param 'fluidityNumFramesToEvent' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'fluidityNumFramesToEvent' parameter should be a integer");
      throw e;
    } else {
      JsonSerializer s(false);
      s.JsonValue = value;
      s.SerializeNVP(fluidityNumFramesToEvent);
      _isSetFluidityNumFramesToEvent = true;
    }
  }

  if (value.isMember ("sendOpticalFlowEvent")) {
    aux = value["sendOpticalFlowEvent"];

    if (!aux.isBool ()) {
      /* param 'sendOpticalFlowEvent' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'sendOpticalFlowEvent' parameter should be a boolean");
      throw e;
    } else {
      JsonSerializer s(false);
      s.JsonValue = value;
      s.SerializeNVP(sendOpticalFlowEvent);
      _isSetSendOpticalFlowEvent = true;
    }
  }

  if (value.isMember ("opticalFlowNumFramesToEvent")) {
    aux = value["opticalFlowNumFramesToEvent"];

    if (!aux.isInt ()) {
      /* param 'opticalFlowNumFramesToEvent' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'opticalFlowNumFramesToEvent' parameter should be a integer");
      throw e;
    } else {
      JsonSerializer s(false);
      s.JsonValue = value;
      s.SerializeNVP(opticalFlowNumFramesToEvent);
      _isSetOpticalFlowNumFramesToEvent = true;
    }
  }

  if (value.isMember ("opticalFlowNumFramesToReset")) {
    aux = value["opticalFlowNumFramesToReset"];

    if (!aux.isInt ()) {
      /* param 'opticalFlowNumFramesToReset' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'opticalFlowNumFramesToReset' parameter should be a integer");
      throw e;
    } else {
      JsonSerializer s(false);
      s.JsonValue = value;
      s.SerializeNVP(opticalFlowNumFramesToReset);
      _isSetOpticalFlowNumFramesToReset = true;
    }
  }

  if (value.isMember ("opticalFlowAngleOffset")) {
    aux = value["opticalFlowAngleOffset"];

    if (!aux.isInt ()) {
      /* param 'opticalFlowAngleOffset' has invalid type value, raise exception */
      JsonRpc::CallException e (JsonRpc::ErrorCode::SERVER_ERROR_INIT,
                                "'opticalFlowAngleOffset' parameter should be a integer");
      throw e;
    } else {
      JsonSerializer s(false);
      s.JsonValue = value;
      s.SerializeNVP(opticalFlowAngleOffset);
      _isSetOpticalFlowAngleOffset = true;
    }
  }

}

} /* kurento */

void
Serialize(std::shared_ptr<kurento::RegionOfInterestConfig>& object, JsonSerializer& s)
{
  if (!s.IsWriter && !object) {
    object.reset(new kurento::RegionOfInterestConfig());
  }

  if (object) {
    s.Serialize("occupancyLevelMin", object->occupancyLevelMin);
    s.Serialize("occupancyLevelMed", object->occupancyLevelMed);
    s.Serialize("occupancyLevelMax", object->occupancyLevelMax);
    s.Serialize("occupancyNumFramesToEvent", object->occupancyNumFramesToEvent);
    s.Serialize("fluidityLevelMin", object->fluidityLevelMin);
    s.Serialize("fluidityLevelMed", object->fluidityLevelMed);
    s.Serialize("fluidityLevelMax", object->fluidityLevelMax);
    s.Serialize("fluidityNumFramesToEvent", object->fluidityNumFramesToEvent);
    s.Serialize("sendOpticalFlowEvent", object->sendOpticalFlowEvent);
    s.Serialize("opticalFlowNumFramesToEvent", object->opticalFlowNumFramesToEvent);
    s.Serialize("opticalFlowNumFramesToReset", object->opticalFlowNumFramesToReset);
    s.Serialize("opticalFlowAngleOffset", object->opticalFlowAngleOffset);
  }

  if (!s.IsWriter) {

    if (s.JsonValue.isMember("occupancyLevelMin")) {
      object->_isSetOccupancyLevelMin = true;
    }

    if (s.JsonValue.isMember("occupancyLevelMed")) {
      object->_isSetOccupancyLevelMed = true;
    }

    if (s.JsonValue.isMember("occupancyLevelMax")) {
      object->_isSetOccupancyLevelMax = true;
    }

    if (s.JsonValue.isMember("occupancyNumFramesToEvent")) {
      object->_isSetOccupancyNumFramesToEvent = true;
    }

    if (s.JsonValue.isMember("fluidityLevelMin")) {
      object->_isSetFluidityLevelMin = true;
    }

    if (s.JsonValue.isMember("fluidityLevelMed")) {
      object->_isSetFluidityLevelMed = true;
    }

    if (s.JsonValue.isMember("fluidityLevelMax")) {
      object->_isSetFluidityLevelMax = true;
    }

    if (s.JsonValue.isMember("fluidityNumFramesToEvent")) {
      object->_isSetFluidityNumFramesToEvent = true;
    }

    if (s.JsonValue.isMember("sendOpticalFlowEvent")) {
      object->_isSetSendOpticalFlowEvent = true;
    }

    if (s.JsonValue.isMember("opticalFlowNumFramesToEvent")) {
      object->_isSetOpticalFlowNumFramesToEvent = true;
    }

    if (s.JsonValue.isMember("opticalFlowNumFramesToReset")) {
      object->_isSetOpticalFlowNumFramesToReset = true;
    }

    if (s.JsonValue.isMember("opticalFlowAngleOffset")) {
      object->_isSetOpticalFlowAngleOffset = true;
    }

  }

}
